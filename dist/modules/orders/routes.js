"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authenticateToken_1 = __importDefault(require("../../middlewares/authenticateToken"));
const controller_1 = __importDefault(require("./controller"));
const OrdersRouter = express_1.default.Router();
OrdersRouter.get("/", authenticateToken_1.default, controller_1.default.getOrders);
OrdersRouter.get("/acceptedorders", authenticateToken_1.default, controller_1.default.getAcceptedOrders);
OrdersRouter.get("/pendingorders", authenticateToken_1.default, controller_1.default.getPendingOrders);
OrdersRouter.get("/completedorders", authenticateToken_1.default, controller_1.default.getCompletedOrders);
OrdersRouter.get("/ordersfordelivery", authenticateToken_1.default, controller_1.default.getForDeliveryOrders);
OrdersRouter.get("/ordersongoingdelivery", authenticateToken_1.default, controller_1.default.getOngoingDeliveryOrders);
OrdersRouter.get("/forpickuporders", authenticateToken_1.default, controller_1.default.getForPickupOrders);
OrdersRouter.get("/gettotalnumberorders", authenticateToken_1.default, controller_1.default.getTotalNumberOrders);
OrdersRouter.get("/getriderpendingdeliveries", authenticateToken_1.default, controller_1.default.getRiderPendingDeliveries);
OrdersRouter.get("/riderdeliveredorders", authenticateToken_1.default, controller_1.default.getRiderDeliveredOrders);
OrdersRouter.get("/getrecentorders", authenticateToken_1.default, controller_1.default.getRecentOrders);
OrdersRouter.get("/:id", controller_1.default.getOrder);
OrdersRouter.patch("/ordersfordelivery/:id", authenticateToken_1.default, controller_1.default.outForDelivery);
OrdersRouter.patch("/assigndeliveryrider", authenticateToken_1.default, controller_1.default.assignDeliveryRider);
OrdersRouter.patch("/orderpickedup", authenticateToken_1.default, controller_1.default.orderPickedup);
OrdersRouter.patch("/readyforpickup/:id", authenticateToken_1.default, controller_1.default.readyForPickup);
OrdersRouter.patch("/orderdelivered/:id", authenticateToken_1.default, controller_1.default.orderDelivered);
OrdersRouter.patch("/:id", authenticateToken_1.default, controller_1.default.acceptOrder);
exports.default = OrdersRouter;
